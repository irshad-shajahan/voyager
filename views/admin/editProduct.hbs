<!DOCTYPE html>
<html lang="en">

<head>
	    <link
      class="jsbin"
      href="http://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/base/jquery-ui.css"
      rel="stylesheet"
      type="text/css"
    />
    <script
      class="jsbin"
      src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
    ></script>
    <script
      class="jsbin"
      src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.0/jquery-ui.min.js"
    ></script>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">

  <title>Tables / General - NiceAdmin Bootstrap Template</title>
  <meta content="" name="description">
  <meta content="" name="keywords">

  <!-- Favicons -->
  <link href="/admin/images/favicon.png" rel="icon">
  <link href="/admin/images/apple-touch-icon.png" rel="apple-touch-icon">

  <!-- Google Fonts -->
  <link href="https://fonts.gstatic.com" rel="preconnect">
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Nunito:300,300i,400,400i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">

  <!-- Vendor CSS Files -->
  <link href="/admin/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
  <link href="/admin/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
  <link href="/admin/vendor/boxicons/css/boxicons.min.css" rel="stylesheet">
  <link href="/admin/vendor/quill/quill.snow.css" rel="stylesheet">
  <link href="/admin/vendor/quill/quill.bubble.css" rel="stylesheet">
  <link href="/admin/vendor/remixicon/remixicon.css" rel="stylesheet">
  <link href="/admin/vendor/simple-datatables/style.css" rel="stylesheet">
  <!-- CSS only -->
<!-- JavaScript Bundle with Popper -->




  <!-- Template Main CSS File -->
  <link href="/admin/stylesheets/style.css" rel="stylesheet">

  <!-- =======================================================
  * Template Name: NiceAdmin - v2.4.1
  * Template URL: https://bootstrapmade.com/nice-admin-bootstrap-admin-html-template/
  * Author: BootstrapMade.com
  * License: https://bootstrapmade.com/license/
  ======================================================== -->
   <style>
      article,
      aside,
      figure,
      footer,
      header,
      hgroup,
      menu,
      nav,
      section {
        display: block;
      }
    </style>
	<style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 350px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>

</head>
<body>
	{{>adminheader}}
	{{>adminsidebar}}
	<main id="main" class="main">
		<section class="section">
			<div class="row">
				<div class="col-lg-6">
					<div class="card">
						<div class="card-body">
							<h5 class="card-title">EDIT PRODUCT</h5>
							{{#each category}}
							<input id="{{this.Category}}" value="{{this.Offer}}" hidden>
							{{/each}}
							<!-- Vertical Form -->
							<form class="row g-3" action="/admin/editProduct/{{products._id}}"
								enctype="multipart/form-data" method="post">
								<div class="col-12">
									<label for="inputNanme4" class="form-label">Name</label>
									<input type="text" name="Name" class="form-control" id="inputNanme4" value="{{products.Name}}">
								</div>
								<div class="col-12">
									<label for="inputNanme4" class="form-label">Brand</label>
									<input type="text" name="Brand" class="form-control" id="inputNanme4" value="{{products.Brand}}">
								</div>
								<div class="col-md-12">
									<div class="form-floating mb-3">
										<select class="form-select" name="Category" id="sel"
											aria-label="State" oninput="discount()">
											<option selected value="{{products.Category}}">{{products.Category}}</option>
											{{#each category}} <option value={{this.Category}}>{{this.Category}}
											</option>
											 {{/each}}
										</select>
										
										<label for="floatingSelect">Category</label>
									</div>
								</div>
								<div class="col-12">
									<label for="inputNanme4" class="form-label">Price</label>
									<input type="text" name="APrice" class="form-control" id="aprice" oninput="discount()" value="{{products.APrice}}">
								</div>
								<div class="col-12">
									<label for="inputNanme4" class="form-label">Product Offer</label>
									<input type="number" name="Poffer" class="form-control" value="{{products.Poffer}}" oninput="discount()" id="proOffer">
								</div>
								
								<div class="col-12">
									<label for="inputNanme4" class="form-label">Quantity</label>
									<input type="text" name="stock" class="form-control" id="inputNanme4" value="{{products.quantity}}">
								</div>
								<div class="col-12">
									<label for="inputNanme4" class="form-label">Offer Price</label>
									<input type="text" name="Price" class="form-control" id="oprice" readonly value="{{products.Price}}">
								</div>
								<div class="col-12">
									<label for="inputPassword4" class="form-label">Description</label>
									<input type="text" name="Description" value="{{products.Description}}"
										class="form-control" id="inputPassword4">
								</div>
								<div class="col-12">
									<div><img style="width: 100px; height: 100px;"
											src="/admin/productImages/{{products.images.[0]}}" alt="img"></div>
                                <label for="id_image">Image</label><br>
                                <input class="form-control" data-bs-toggle="modal" onchange="readURL(this);" data-bs-target="#exampleModal" type="file" id="id_image"
                                    name="Image" accept="image/*" multiple><br>
									<img id="blah" src="#" alt="">
								</div>
								<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog"
									aria-labelledby="exampleModalLabel" aria-hidden="true">
									<div class="modal-dialog modal-xl" role="document">
										<div class="modal-content">
											<div class="modal-header">
												<h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
												<div class="modal-header border-bottom-0">
													<button type="button" class="btn-close" data-bs-dismiss="modal"
														aria-label="Close"></button>
												</div>
											</div>
											<div class="modal-body">
												<div class="form-group row" id="test">
												</div>
											</div>
											<div class="modal-header text-center">
												<button class="btn btn-success" type="button" data-bs-dismiss="modal"
													aria-label="Close">Save
													Changes</button>
											</div>
										</div>
										   
									</div>
								</div>
								<div class="text-center">
									<button type="submit" class="btn btn-primary">Edit Product</button>
									<button type="reset" class="btn btn-secondary">Reset</button>
								</div>
							</form><!-- Vertical Form -->

						</div>
					</div>
				</div>
			</div>
		</section>
	</main>
	{{>adminjs}}
	<script>
		function readURL(input) {
  if (input.files && input.files[0]) {
    var reader = new FileReader();

    reader.onload = function (e) {
      $('#blah').attr('src', e.target.result).width(150).height(200);
    };

    reader.readAsDataURL(input.files[0]);
  }
}
	</script>
	<script>
    const input = document.getElementById('id_image')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = []
        const imagebox = []
        const crop_btn = []
        const confirm_btn = []
        const url = []
        const length = input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }

        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url, i) => {
            document.getElementById('image-box' + i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable


        // Displaying the image box
        for (i = 0; i < length; i++) {
            document.getElementById('image-box' + i).style.display = 'block'
            document.getElementById('crop-btn' + i).style.display = 'block'
        }


        for (i = 0; i < length; i++) {
            cropper(img_data[i], document.getElementById('image' + i), i, document.getElementById('crop-btn' + i), document.getElementById('image-box' + i))
        }



        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container

                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files

                    // Replace the original image file with the new cropped image file



                    // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });
</script>
<script>
    const input = document.getElementById('id_image')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = []
        const imagebox = []
        const crop_btn = []
        const confirm_btn = []
        const url = []
        const length = input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }

        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url, i) => {
            document.getElementById('image-box' + i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable


        // Displaying the image box
        for (i = 0; i < length; i++) {
            document.getElementById('image-box' + i).style.display = 'block'
            document.getElementById('crop-btn' + i).style.display = 'block'
        }


        for (i = 0; i < length; i++) {
            cropper(img_data[i], document.getElementById('image' + i), i, document.getElementById('crop-btn' + i), document.getElementById('image-box' + i))
        }



        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container

                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files

                    // Replace the original image file with the new cropped image file



                    // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });
</script>

	<script>
		function discount(){
			catid=document.getElementById('sel').value
			catoffer=parseInt(document.getElementById(catid).value)
			proffer=parseInt(document.getElementById('proOffer').value)
			let aprice=parseInt(document.getElementById('aprice').value)
			let offer=(catoffer+proffer)/100
			if(offer>=1){
				document.getElementById('oprice').value=aprice
			}else{

			let discount=aprice-Math.round((aprice*offer))
			document.getElementById('oprice').value=discount
			}
		}
	</script>
    
</body>